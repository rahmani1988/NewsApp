plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'com.google.gms.google-services'
}

android {
    namespace 'com.reza.newsapp'
    compileSdk 34

    defaultConfig {
        applicationId "com.reza.newsapp"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ext.config = getProps('../config/release.properties')
            ext.config.each { p ->
                if (p.key == "APP_NAME") {
                    resValue "string", "app_name", p.value
                } else if (p.key == "APPLICATION_ID_SUFFIX") {
                    applicationIdSuffix p.value
                } else {
                    buildConfigField 'String', p.key, p.value
                }
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.0'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    buildFeatures {
        buildConfig = true
    }
}

dependencies {

    // Projects
    implementation project(':core')
    implementation project(':auth')
    implementation project(':dashboard')

    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation 'androidx.activity:activity-compose:1.7.2'

    // Hilt
    implementation "com.google.dagger:hilt-android:2.44.2"
    kapt "com.google.dagger:hilt-compiler:2.44.2"

    // Firebase
    // Import the Firebase BoM
    implementation(platform("com.google.firebase:firebase-bom:32.2.2"))
    implementation("com.google.firebase:firebase-analytics-ktx")

    // Test
    testImplementation 'junit:junit:4.13.2'

    // Instrumented Test
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2022.10.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
}

File signPropsFile = file('../signing/release.props')
if (signPropsFile.exists()) {
    Properties props = new Properties()
    props.load(new FileInputStream(signPropsFile))
    android {
        signingConfigs {
            release {
                storeFile file('../signing/release.keystore')
                storePassword props['storePass']
                keyAlias props['keyAlias']
                keyPassword props['keyPass']
            }
            staging {
                storeFile file('../signing/release.keystore')
                storePassword props['storePass']
                keyAlias props['keyAlias']
                keyPassword props['keyPass']
            }
        }
        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
            staging {
                signingConfig signingConfigs.release
            }
        }
    }
} else {
    android {
        buildTypes {
            release {
                signingConfig signingConfigs.debug
            }
        }
    }
}

def getProps(path) {
    Properties props = new Properties()
    props.load(new FileInputStream(file(path)))
    return props
}

def getApiKey() {
    def adMobApiKey = System.getenv("NEWS_APP_API_KEY")
    if (adMobApiKey == null || adMobApiKey.length() == 0) {
        def localFile = file("../local.properties")
        def properties = new Properties()
        properties.load(new FileInputStream(localFile))
        adMobApiKey = properties['NEWS_APP_API_KEY']
        if (adMobApiKey == null) {
            logger.error("You need to either place appropriate local.properties or set proper environment variables on Jenkins for API key")
        }
    }
    return adMobApiKey
}